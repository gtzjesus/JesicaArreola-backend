/**
 * Error format
 *
 * {@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}
 */
interface PostgrestError {
    message: string;
    details: string;
    hint: string;
    code: string;
}
/**
 * Response format
 *
 * {@link https://github.com/supabase/supabase-js/issues/32}
 */
interface PostgrestResponse<T> {
    error: PostgrestError | null;
    data: T[] | null;
    status: number;
    statusText: string;
    body: T[] | null;
}
export interface PostgrestSingleResponse<T> {
    error: PostgrestError | null;
    data: T | null;
    status: number;
    statusText: string;
    body: T | null;
}
export declare abstract class PostgrestBuilder<T> implements PromiseLike<PostgrestResponse<T>> {
    protected method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE';
    protected url: URL;
    protected headers: {
        [key: string]: string;
    };
    protected schema?: string;
    protected body?: Partial<T> | Partial<T>[];
    constructor(builder: PostgrestBuilder<T>);
    then<TResult1 = PostgrestResponse<T>, TResult2 = never>(onfulfilled?: ((value: PostgrestResponse<T>) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;
}
export {};
//# sourceMappingURL=types.d.ts.map